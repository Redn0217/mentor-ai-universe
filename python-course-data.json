{
  "course": {
    "slug": "python",
    "title": "Python Programming",
    "description": "Learn Python programming from basics to advanced concepts with practical exercises and real-world projects. Master the fundamentals of Python syntax, data structures, object-oriented programming, and more.",
    "short_description": "Complete Python programming course from beginner to advanced level",
    "icon": "code",
    "color": "#3776AB",
    "difficulty_level": "beginner",
    "estimated_duration_hours": 40,
    "prerequisites": [],
    "learning_objectives": [
      "Understand Python syntax and basic programming concepts",
      "Work with Python data types and structures",
      "Implement control flow and functions",
      "Master object-oriented programming in Python",
      "Handle files, exceptions, and modules",
      "Build real-world Python applications"
    ],
    "tags": ["python", "programming", "beginner", "coding", "software-development"],
    "is_published": true,
    "is_featured": true,
    "tutor_name": "Dr. Ana Python",
    "tutor_avatar": "https://api.dicebear.com/7.x/avataaars/svg?seed=Ana",
    "tutor_bio": "Senior Python Developer with 10+ years of experience in software development and education."
  },
  "modules": [
    {
      "title": "Python Fundamentals",
      "description": "Get started with Python programming basics",
      "slug": "python-fundamentals",
      "order_index": 1,
      "estimated_duration_minutes": 180,
      "difficulty_level": "beginner",
      "learning_objectives": [
        "Set up Python development environment",
        "Understand Python syntax and basic concepts",
        "Write your first Python programs"
      ],
      "lessons": [
        {
          "title": "Python Introduction",
          "description": "What is Python and why use it?",
          "slug": "python-introduction",
          "order_index": 1,
          "content": "# Python Introduction\n\nPython is a popular programming language. It was created by Guido van Rossum, and released in 1991.\n\n## What is Python used for?\n- Web development (server-side)\n- Software development\n- Mathematics\n- System scripting\n- Data analysis\n- Artificial intelligence\n- Machine learning\n\n## Why Python?\n- Works on different platforms (Windows, Mac, Linux, etc.)\n- Simple syntax similar to English language\n- Allows developers to write programs with fewer lines\n- Runs on an interpreter system\n- Can be treated in procedural, object-oriented, or functional way\n\n## Python Syntax compared to other languages\n- Designed for readability\n- Uses new lines to complete a command\n- Relies on indentation to define scope",
          "content_type": "markdown",
          "estimated_duration_minutes": 15,
          "key_concepts": ["Python history", "Use cases", "Syntax basics"],
          "code_examples": [
            {
              "title": "Hello World",
              "code": "print(\"Hello, World!\")",
              "explanation": "This is the traditional first program in Python"
            }
          ]
        },
        {
          "title": "Python Get Started",
          "description": "Install Python and set up your development environment",
          "slug": "python-get-started",
          "order_index": 2,
          "content": "# Python Get Started\n\n## Python Install\nMany PCs and Macs will have Python already installed. To check if you have Python installed, open a command line and type:\n\n```\npython --version\n```\n\n## Python Quickstart\nPython is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the Python interpreter to be executed.\n\n## The Python Command Line\nTo test a short amount of code in Python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.\n\n## Creating Your First Python File\nCreate a file called `hello.py` and write the following code:\n\n```python\nprint(\"Hello, World!\")\n```\n\nSave the file and run it from the command line:\n\n```\npython hello.py\n```",
          "content_type": "markdown",
          "estimated_duration_minutes": 20,
          "key_concepts": ["Installation", "Command line", "First program"],
          "code_examples": [
            {
              "title": "Check Python Version",
              "code": "python --version",
              "explanation": "Command to check if Python is installed"
            },
            {
              "title": "First Python File",
              "code": "# hello.py\nprint(\"Hello, World!\")",
              "explanation": "Your first Python program saved in a file"
            }
          ]
        },
        {
          "title": "Python Syntax",
          "description": "Learn the basic syntax rules of Python",
          "slug": "python-syntax",
          "order_index": 3,
          "content": "# Python Syntax\n\n## Execute Python Syntax\nPython syntax can be executed by writing directly in the Command Line or by creating a Python file on the server, using the .py file extension, and running it in the Command Line.\n\n## Python Indentation\nIndentation refers to the spaces at the beginning of a code line. Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\n\nPython uses indentation to indicate a block of code:\n\n```python\nif 5 > 2:\n    print(\"Five is greater than two!\")\n```\n\nPython will give you an error if you skip the indentation:\n\n```python\nif 5 > 2:\nprint(\"Five is greater than two!\")  # This will cause an error\n```\n\n## Python Variables\nIn Python, variables are created when you assign a value to it:\n\n```python\nx = 5\ny = \"Hello, World!\"\n```\n\n## Comments\nPython has commenting capability for the purpose of in-code documentation. Comments start with a #:\n\n```python\n# This is a comment\nprint(\"Hello, World!\")\n```",
          "content_type": "markdown",
          "estimated_duration_minutes": 25,
          "key_concepts": ["Indentation", "Variables", "Comments", "Code blocks"],
          "code_examples": [
            {
              "title": "Proper Indentation",
              "code": "if 5 > 2:\n    print(\"Five is greater than two!\")",
              "explanation": "Correct use of indentation in Python"
            },
            {
              "title": "Variables",
              "code": "x = 5\ny = \"Hello, World!\"\nprint(x)\nprint(y)",
              "explanation": "Creating and using variables"
            }
          ]
        }
      ],
      "exercises": [
        {
          "title": "Hello World Exercise",
          "description": "Write a Python program that prints 'Hello, World!' to the console",
          "slug": "hello-world-exercise",
          "order_index": 1,
          "exercise_type": "coding",
          "difficulty_level": "beginner",
          "estimated_time_minutes": 10,
          "instructions": "Create a Python program that displays 'Hello, World!' when executed. Use the print() function to output the text.",
          "starter_code": "# Write your code here\n",
          "solution_code": "print(\"Hello, World!\")",
          "test_cases": [
            {
              "input": "",
              "expected_output": "Hello, World!",
              "description": "Should print Hello, World!"
            }
          ],
          "hints": [
            "Use the print() function",
            "Remember to use quotes around the text"
          ],
          "tags": ["basics", "print", "hello-world"],
          "points": 10
        },
        {
          "title": "Variable Assignment",
          "description": "Practice creating and using variables in Python",
          "slug": "variable-assignment",
          "order_index": 2,
          "exercise_type": "coding",
          "difficulty_level": "beginner",
          "estimated_time_minutes": 15,
          "instructions": "Create three variables: name (string), age (integer), and height (float). Print each variable on a separate line.",
          "starter_code": "# Create your variables here\nname = \nage = \nheight = \n\n# Print the variables\n",
          "solution_code": "name = \"John\"\nage = 25\nheight = 5.9\n\nprint(name)\nprint(age)\nprint(height)",
          "test_cases": [
            {
              "input": "",
              "expected_output": "John\n25\n5.9",
              "description": "Should print the three variables"
            }
          ],
          "hints": [
            "Use quotes for strings",
            "Numbers don't need quotes",
            "Use print() for each variable"
          ],
          "tags": ["variables", "data-types", "print"],
          "points": 15
        }
      ],
      "resources": [
        {
          "title": "Python Official Documentation",
          "description": "Official Python documentation and tutorials",
          "resource_type": "documentation",
          "url": "https://docs.python.org/3/",
          "is_external": true,
          "difficulty_level": "beginner",
          "estimated_time_minutes": 30,
          "tags": ["documentation", "official", "reference"]
        },
        {
          "title": "Python Installation Guide",
          "description": "Step-by-step guide to install Python on different operating systems",
          "resource_type": "tutorial",
          "url": "https://www.python.org/downloads/",
          "is_external": true,
          "difficulty_level": "beginner",
          "estimated_time_minutes": 15,
          "tags": ["installation", "setup", "tutorial"]
        }
      ]
    },
    {
      "title": "Python Data Types",
      "description": "Master Python's built-in data types and their operations",
      "slug": "python-data-types",
      "order_index": 2,
      "estimated_duration_minutes": 240,
      "difficulty_level": "beginner",
      "learning_objectives": [
        "Understand different Python data types",
        "Work with strings, numbers, and booleans",
        "Perform type conversion and casting"
      ],
      "lessons": [
        {
          "title": "Python Variables",
          "description": "Learn how to create and use variables in Python",
          "slug": "python-variables",
          "order_index": 1,
          "content": "# Python Variables\n\n## Creating Variables\nPython has no command for declaring a variable. A variable is created the moment you first assign a value to it.\n\n```python\nx = 5\ny = \"John\"\nprint(x)\nprint(y)\n```\n\n## Variable Names\nA variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).\n\nRules for Python variables:\n- Must start with a letter or underscore\n- Cannot start with a number\n- Can only contain alpha-numeric characters and underscores\n- Case-sensitive (age, Age and AGE are three different variables)\n\n## Assign Multiple Values\nPython allows you to assign values to multiple variables in one line:\n\n```python\nx, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)\n```\n\n## Global Variables\nVariables that are created outside of a function are known as global variables.",
          "content_type": "markdown",
          "estimated_duration_minutes": 20,
          "key_concepts": ["Variable creation", "Naming rules", "Multiple assignment", "Global variables"],
          "code_examples": [
            {
              "title": "Basic Variables",
              "code": "x = 5\ny = \"John\"\nprint(x)\nprint(y)",
              "explanation": "Creating and printing variables"
            },
            {
              "title": "Multiple Assignment",
              "code": "x, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x, y, z)",
              "explanation": "Assigning multiple values at once"
            }
          ]
        },
        {
          "title": "Python Numbers",
          "description": "Work with numeric data types in Python",
          "slug": "python-numbers",
          "order_index": 2,
          "content": "# Python Numbers\n\nThere are three numeric types in Python:\n- int\n- float\n- complex\n\n## Int\nInt, or integer, is a whole number, positive or negative, without decimals, of unlimited length.\n\n```python\nx = 1\ny = 35656222554887711\nz = -3255522\n\nprint(type(x))\nprint(type(y))\nprint(type(z))\n```\n\n## Float\nFloat, or \"floating point number\" is a number, positive or negative, containing one or more decimals.\n\n```python\nx = 1.10\ny = 1.0\nz = -35.59\n\nprint(type(x))\nprint(type(y))\nprint(type(z))\n```\n\n## Complex\nComplex numbers are written with a \"j\" as the imaginary part:\n\n```python\nx = 3+5j\ny = 5j\nz = -5j\n\nprint(type(x))\nprint(type(y))\nprint(type(z))\n```\n\n## Type Conversion\nYou can convert from one type to another with the int(), float(), and complex() methods.",
          "content_type": "markdown",
          "estimated_duration_minutes": 25,
          "key_concepts": ["Integer", "Float", "Complex", "Type conversion"],
          "code_examples": [
            {
              "title": "Number Types",
              "code": "x = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n\nprint(type(x))\nprint(type(y))\nprint(type(z))",
              "explanation": "Different numeric types in Python"
            }
          ]
        },
        {
          "title": "Python Strings",
          "description": "Master string manipulation and operations",
          "slug": "python-strings",
          "order_index": 3,
          "content": "# Python Strings\n\nStrings in Python are surrounded by either single quotation marks, or double quotation marks.\n\n```python\nprint(\"Hello\")\nprint('Hello')\n```\n\n## Multiline Strings\nYou can assign a multiline string to a variable by using three quotes:\n\n```python\na = \"\"\"Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)\n```\n\n## Strings are Arrays\nLike many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.\n\n```python\na = \"Hello, World!\"\nprint(a[1])  # Output: e\n```\n\n## String Length\nTo get the length of a string, use the len() function:\n\n```python\na = \"Hello, World!\"\nprint(len(a))  # Output: 13\n```\n\n## String Methods\nPython has a set of built-in methods that you can use on strings:\n- upper() - converts to uppercase\n- lower() - converts to lowercase\n- strip() - removes whitespace\n- replace() - replaces a string with another string\n- split() - splits the string into substrings",
          "content_type": "markdown",
          "estimated_duration_minutes": 30,
          "key_concepts": ["String creation", "Multiline strings", "String indexing", "String methods"],
          "code_examples": [
            {
              "title": "String Basics",
              "code": "name = \"Python\"\nprint(name[0])  # First character\nprint(len(name))  # Length\nprint(name.upper())  # Uppercase",
              "explanation": "Basic string operations"
            }
          ]
        }
      ],
      "exercises": [
        {
          "title": "Number Operations",
          "description": "Practice working with different number types",
          "slug": "number-operations",
          "order_index": 1,
          "exercise_type": "coding",
          "difficulty_level": "beginner",
          "estimated_time_minutes": 20,
          "instructions": "Create variables for integer, float, and perform basic arithmetic operations. Print the results.",
          "starter_code": "# Create an integer variable\nnum1 = \n\n# Create a float variable\nnum2 = \n\n# Perform operations and print results\n",
          "solution_code": "num1 = 10\nnum2 = 3.5\n\nprint(num1 + num2)\nprint(num1 - num2)\nprint(num1 * num2)\nprint(num1 / num2)",
          "test_cases": [
            {
              "input": "",
              "expected_output": "13.5\n6.5\n35.0\n2.857142857142857",
              "description": "Should perform arithmetic operations"
            }
          ],
          "hints": [
            "Use whole numbers for integers",
            "Use decimal numbers for floats",
            "Try addition, subtraction, multiplication, and division"
          ],
          "tags": ["numbers", "arithmetic", "operations"],
          "points": 15
        }
      ]
    }
  ]
}
